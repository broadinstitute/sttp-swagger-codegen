{{>licenseInfo}}
package {{invokerPackage}}

import io.circe.{Decoder, DecodingFailure, HCursor}
import java.util.Date
import java.text.SimpleDateFormat
import better.files.File

import io.circe.Decoder.Result

object Decoders {

  val dateFormats: Seq[SimpleDateFormat] =
    Seq("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "dd/MM/yyyy").map(new SimpleDateFormat(_))

  def parseDate(string: String): Either[String, Date] = {
    var date: Date = null
    val dateFormatIter = dateFormats.iterator
    while (date == null && dateFormatIter.hasNext) {
      val dateFormat = dateFormatIter.next()
      try {
        date = dateFormat.parse(string)
      } catch {
        case e: java.text.ParseException => ()
      }
    }
    if (date != null) {
      Right(date)
    } else {
      Left("Cannot parse date - unsupported format.")
    }
  }

  implicit val dateDecoder: Decoder[Date] = new Decoder[Date] {
    override def apply(cursor: HCursor): Result[Date] = {
      cursor.as[String].flatMap(parseDate(_).left.map(DecodingFailure(_, cursor.history)))
    }
  }

  implicit val fileDecoder: Decoder[File] = new Decoder[File] {
    override def apply(cursor: HCursor): Result[File] = {
      cursor.as[String].map(File(_))
    }
  }
}