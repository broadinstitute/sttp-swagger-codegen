{{>licenseInfo}}
package {{package}}

{{#imports}}
import {{import}}
import {{import}}._
{{/imports}}

import sttp.client._
import sttp.client.circe._
import io.circe.generic.auto._

import {{invokerPackage}}.Decoders._
import {{invokerPackage}}.Encoders._
import {{invokerPackage}}.SttpUtils.Implicits._

{{#operations}}
object {{classname}} {

  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}
   *
{{#allParams}}   * @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}   * @return Option[{{returnTypeOrUnit}}]
   */
  def {{operationId}}(
    {{#allParams}}{{^required}}{{paramName}}: Option[{{dataType}}] = {{#defaultValue}}Option({{#isString}}"{{{defaultValue}}}"{{/isString}}{{^isString}}{{#isByteArray}}"{{/isByteArray}}{{#isDate}}dateFormatter.parse("{{/isDate}}{{#isDateTime}}dateTimeFormatter.parse("{{/isDateTime}}{{{defaultValue}}}{{#isDate}}"){{/isDate}}{{#isDateTime}}"){{/isDateTime}}{{#isByteArray}}".getBytes{{/isByteArray}}{{/isString}}){{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{#hasMore}},{{/hasMore}}
    {{/required}}{{#required}}{{paramName}}: {{dataType}}{{#defaultValue}} = {{#isString}}"{{{defaultValue}}}"{{/isString}}{{^isString}}{{#isByteArray}}"{{/isByteArray}}{{#isDate}}dateFormatter.parse("{{/isDate}}{{#isDateTime}}dateTimeFormatter.parse("{{/isDateTime}}{{{defaultValue}}}{{#isDate}}"){{/isDate}}{{#isDateTime}}"){{/isDateTime}}{{#isByteArray}}".getBytes{{/isByteArray}}{{/isString}}{{/defaultValue}}{{#hasMore}},
    {{/hasMore}}{{/required}}{{/allParams}}): Request[Either[ResponseError[io.circe.Error],{{returnTypeOrUnit}}],Nothing] = {
  {{#allParams}}
      {{#required}}
          {{^isPrimitiveType}}
    assert({{paramName}} != null, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}")
          {{/isPrimitiveType}}
          {{#isString}}
    assert({{paramName}} != null, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}")
          {{/isString}}
      {{/required}}
  {{/allParams}}

    basicRequest
      .{{httpMethodLowerCase}}(uri"{{host}}{{basePath}}{{{pathWithInterpolations}}}{{{query}}}")
  {{#headerParams}}
      {{^required}}
      .headerOpt({{basename}}, {{paramName}}.map(_.toString))
      {{/required}}
      {{#required}}
      .header({{baseName}}, {{paramName}}.toString)
      {{/required}}
  {{/headerParams}}
  {{#bodyParam}}
      .body({{paramName}})
  {{/bodyParam}}
      .response(asJson[{{returnTypeOrUnit}}])
  }

  {{/operation}}
}

{{/operations}}
