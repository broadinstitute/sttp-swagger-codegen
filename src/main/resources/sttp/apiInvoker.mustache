{{>licenseInfo}}
package {{invokerPackage}}

import java.io.File
import java.net.URLEncoder
import java.util.UUID

import scala.collection.JavaConverters._
import scala.collection.mutable

class ApiInvoker(
  httpHeaders: mutable.HashMap[String, String] = mutable.HashMap(),
  asyncHttpClient: Boolean = false,
  authScheme: String = "",
  authPreemptive: Boolean = false
) {

  var defaultHeaders: mutable.HashMap[String, String] = httpHeaders

  def escape(value: String): String = {
    URLEncoder.encode(value, "utf-8").replaceAll("\\+", "%20")
  }
  def escape(values: List[String]): String = {
     values.map(escape).mkString(",")
  }

  def escape(value: Long): String = value.toString
  def escape(value: Double): String = value.toString
  def escape(value: Float): String = value.toString
  def escape(value: UUID): String = value.toString

  def deserialize(json: String, containerType: String, cls: Class[_]) = {
    if (cls == classOf[String]) {
      json match {
        case s: String =>
          if (s.startsWith("\"") && s.endsWith("\"") && s.length > 1) {
            s.substring(1, s.length - 1)
          } else {
            s
          }
        case _ => null
      }
    } else {
      containerType.toLowerCase match {
        case "array" =>
          val typeInfo = ??? // mapper.getTypeFactory.constructCollectionType(classOf[java.util.List[_]], cls)
          val response = ??? // mapper.readValue(json, typeInfo).asInstanceOf[java.util.List[_]]
          ??? // response.asScala.toList
        case "list" =>
          val typeInfo = ??? // mapper.getTypeFactory.constructCollectionType(classOf[java.util.List[_]], cls)
          val response = ??? // mapper.readValue(json, typeInfo).asInstanceOf[java.util.List[_]]
          ??? // response.asScala.toList
        case _ =>
          json match {
            case e: String if "\"\"" == e => null
            case _ => ??? // mapper.readValue(json, cls)
          }
      }
    }
  }

  def serialize(obj: AnyRef): String = {
    if (obj != null) {
      obj match {
        case e: List[_] => ??? // mapper.writeValueAsString(obj.asInstanceOf[List[_]].asJava)
        case _ => ??? // mapper.writeValueAsString(obj)
      }
    } else {
        null
    }
  }

  def invokeApi(
    host: String,
    path: String,
    method: String,
    queryParams: Map[String, String],
    formParams: Map[String, String],
    body: AnyRef,
    headerParams: Map[String, String],
    contentType: String
  ): String = {
    ???
  }
}

object ApiInvoker extends ApiInvoker(
  httpHeaders = mutable.HashMap(),
  asyncHttpClient = {{asyncHttpClient}},
  authScheme = "{{authScheme}}",
  authPreemptive = {{authPreemptive}}
)

class ApiException(val code: Int, msg: String) extends RuntimeException(msg)
